// slim recipe related to section... 

// fist generation is a dummy generation
// implementing ancestry tracking in bands

initialize() {
	setSeed(314159); // set seed to make results reproducible


	initializeSLiMModelType("nonWF");
	defineConstant("pop_size", 40000);
	defineConstant("K", 40000);  // need to tune K with S so that population size is ~20000 if that's what I'm aiming for (it won't be exactly the same as S)
	// ~15200 appears to be good for N=40000
	// ~14225 good for no mapValues
	defineConstant("S", 0.02); // spatial competition distance (and max mate choice distance)
	
	initializeSLiMOptions(dimensionality="xy");
	initializeMutationRate(0.0);  // don't want any mutations occuring unless explicitly specified
	
	initializeMutationType("m2", 0.5, "f", 0.0); // this will act as our marker mutation
	
	initializeGenomicElementType("g1", m2, 1.0);
	initializeGenomicElement(g1, 0, 100000);
	initializeRecombinationRate(c(0, 1e-8), ends=c(0, 100000)); // 0th position is reserved for this marker mutation
	
	m2.convertToSubstitution = F;
	
	// spatial competition:
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S*3);
	i1.setInteractionFunction("n", 3.77, S);
	
	// spatial mate choice:
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=S);
	
	defineConstant("migrants_per_generation", 10000);
	defineConstant("mean_lifetime", 1.8); 
	defineConstant("num_bands", 6);

}


function (float)calculate_band_ancestry(* band_no) {
	// returns average ancestry in that band. if num_bands is 3 then band_no should be 1, 2 or 3
	lower = ((band_no - 1) / num_bands)*3.9;
	upper = (band_no / num_bands)*3.9;
	
	ys = p1.individuals.spatialPosition[0:(length(p1.individuals.spatialPosition)-1) % 2 != 0];
	inds = p1.individuals[ys >= lower & ys <= upper];
	//inds.color = "green";  // just to check we're finding the correct individuals
	
	return mean(inds.tagF);
}

1 early() {

	//sim.addSubpop("p1", asInteger(length(positions)/2)); 
	sim.addSubpop("p1", pop_size);
	p1.setSpatialBounds(c(0.0, 0.0, 1.0, 3.9)); // make rectangular
	//p1.individuals.setSpatialPosition(asFloat(positions)); 	
	p1.individuals.setSpatialPosition(p1.pointUniform(pop_size)); 
	
	p2_size = 50000;
	sim.addSubpop("p2", p2_size);
	p2.individuals.setSpatialPosition(p2.pointUniform(p2_size));
	
	// set genealogical ancestry values:
	p1.individuals.tagF = 0.0;
	p2.individuals.tagF = 1.0;
	
	
	// keep track of mate choice:
	defineGlobal("mate_choices", c(0, 0, 0, 0)); // 0, 1, 2, 3
	defineGlobal("ages", rep(0, 33)); 
}

2 first() { 
	// set ages:
	for (ind in p1.individuals) {
		draw = runif(1); 
		if (draw < 0.33) {
			ind.age = 0; 		
		} else if (draw < 0.66) {
			ind.age = 1; 		
		} else {
			ind.age = 2; 		
		}
	}
}

2: first() {
	i1.evaluate(p1);
}

2:33 first() {
	// select parents who will migrate in current generation
	//i1.evaluate(); 	
	
	p2.individuals.tag = 0; // i.e. by default, don't clone
	
	
	from_p2 = p2.individuals[0:(migrants_per_generation-1)]; 
	from_p2.tag = 1; // i.e. these will be selected to migrate in late event
}


reproduction() {
	if (!(sim.generation >= 2 & subpop == p2)) {
		mate = i2.nearestNeighbors(individual, 3);
		//if (mate.size() == 0) print("zero"); 
		mate_choices[mate.size()] = mate_choices[mate.size()] + 1;
		if (!mate.size()) {
			return;
		}
		mate = sample(mate, 1);
		
		for (i in seqLen(rpois(1, 0.5))) {
			//pos = individual.spatialPosition + rnorm(2, 0, 0.02); 
			offspring = subpop.addCrossed(individual, mate);
			offspring.tagF = mean(c(individual, mate).tagF);
			
			// reprising BCs: 
			do pos = individual.spatialPosition + rnorm(2, 0, 1.0); //add more dispersion to allow ancestry to spread more (without much more computational expense)
			while (!p1.pointInBounds(pos));
			offspring.setSpatialPosition(p1.pointStopped(pos)); // i.e. if it's going out, force it back in
		
		}
	} else {
		if (individual.tag == 1) {
			offspring = p2.addCloned(individual);
			offspring.setSpatialPosition(individual.spatialPosition);
			offspring.tag = 0; // i.e. don't clone		
			offspring.tagF = 1.0; // i.e. part of migrant population
		}
	}
}

1: early () {
	// fitness scaling according to spatial competition:
	i1.evaluate(p1); // re-evaluate since reproduction has occured in this generation
	
	inds = p1.individuals;
	competition = i1.totalOfNeighborStrengths(inds);
	competition = (competition + 1) / (2*PI*S^2);
	
	inds.fitnessScaling = 1 / (1+(competition/(K*(1+mean_lifetime))));
	//inds.fitnessScaling = K / competition;	
}

1 survival(p1) {
	return T; 
}

1: survival(p2) {
	return T;
}

2:33 survival(p1) {
	if ((!individual.migrant) & individual.age == sim.generation) {
		age = individual.age - 1; // since first generation is dummy generation
	} else {
		age = individual.age; 
	}
	if (!surviving) {
		ages[age] = ages[age] + 1;
		return F;
	}
//	if (age == 2) return F; 
	return NULL; 
}

1: late() {
	i2.evaluate(p1);
	p1.individuals.color = colors(p1.individuals.tagF, "heat");
}

2 late() {
	setwd("~/Desktop/compBio/Internship/adding_to_base_model/modelling_britain/first_spatial_model"); 
	log = sim.createLogFile("bands.txt", logInterval=1); 
	log.addCustomColumn("effective_generation", "sim.generation-1;"); 
	for (i in 1:num_bands) {
		log.addCustomColumn(paste0("band", i), paste0("calculate_band_ancestry(", i, ");"));
	}
}

2:33 late() { // the 1000 here HAS TO match the 1000 in the first() event in order for the simulation to work properly
	// migrate individuals chosen in first() event 
	
	from_p2 = p2.individuals[p2.individuals.tag == 1];
	
	if (from_p2.size()) {
		
		// and now we migrate the parents:
		p1.takeMigrants(from_p2);
		from_p2.color = colors(from_p2.tagF, "heat");
		xs = runif(from_p2.size()); ys = runif(from_p2.size(), min=0.0, max=0.8); // add in narrow band
		from_p2.setSpatialPosition(rbind(xs, ys));
		from_p2.age = 1; 
	}
	i2.evaluate(p1); // re-evaluate given that we've changed the population
	
	// set color:
	//p1.individuals.color = colors(p1.individuals.)... 
}

33 late() {
	writeFile("~/Desktop/compBio/Internship/adding_to_base_model/modelling_britain/first_spatial_model/mate_choices.txt", contents=asString(mate_choices));
	writeFile("~/Desktop/compBio/Internship/adding_to_base_model/modelling_britain/first_spatial_model/ages_dying.txt", contents=asString(ages)); 
}

33: late() {
	writeFile(paste0("~/Desktop/compBio/Internship/adding_to_base_model/modelling_britain/first_spatial_model/inds_eff_gen_", sim.generation-1, ".txt"), contents=asString(p1.individuals.tagF));
}

34 late() {
	print(mean(p1.individuals.tagF)); 
}

50 late() {
	sim.simulationFinished(); 
}

500 late() {
	sim.simulationFinished(); 
}

